/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Views;

import Model.DanhSachHoaDon;
import Model.HoaDonChiTiet;
import Service.DanhSachHoaDonService;
import Service.HoaDonChiTietService;
import com.itextpdf.io.font.PdfEncodings;
import com.itextpdf.kernel.colors.Color;
import com.itextpdf.kernel.colors.ColorConstants;
import com.itextpdf.kernel.colors.DeviceRgb;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.pdf.PdfDocument;

import static com.itextpdf.kernel.pdf.PdfName.Border;

import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;

import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Paragraph;

import com.itextpdf.layout.element.Table;

import com.itextpdf.layout.properties.TextAlignment;

import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import com.itextpdf.layout.properties.UnitValue;

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;

/**
 * @author Admin
 */
public class ViewHoaDon extends javax.swing.JPanel {

    DefaultTableModel dtmHoaDon;
    DefaultTableModel dtmHoaDonChiTiet;
    DanhSachHoaDonService danhSachHoaDonService = new DanhSachHoaDonService();
    HoaDonChiTietService hoaDonChiTietService = new HoaDonChiTietService();
    private List<DanhSachHoaDon> danhSachHoaDonList = new ArrayList<>();
    private List<HoaDonChiTiet> hoaDonChiTietList = new ArrayList<>();
    private int ChonHoaDon;

    /**
     * Creates new form ViewHoaDon
     */
    public ViewHoaDon() {
        initComponents();
        this.fillTableHoaDon();
        this.fillTableHoaDonTimkiem(danhSachHoaDonService.getDanhSachHoaDon());

    }

    private void fillTableHoaDon() {
        danhSachHoaDonList = danhSachHoaDonService.getDanhSachHoaDon();
        dtmHoaDon = (DefaultTableModel) tblbanghoadon.getModel();
        dtmHoaDon.setRowCount(0);

        for (DanhSachHoaDon hoaDon : danhSachHoaDonList) {
            dtmHoaDon.addRow(hoaDon.toDataRow());
        }
    }

    // Populate invoice details table based on selected invoice
    private void fillTableHDCT(int hoaDonId) {
        hoaDonChiTietList = hoaDonChiTietService.getAllDanhSachHoaDon(hoaDonId);
        dtmHoaDonChiTiet = (DefaultTableModel) tblhoadonchitiet.getModel();
        dtmHoaDonChiTiet.setRowCount(0);

        for (HoaDonChiTiet hdct : hoaDonChiTietList) {
            dtmHoaDonChiTiet.addRow(hdct.toDataRowdanhsach());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblbanghoadon = new javax.swing.JTable();
        btninhoadon = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtmahoadon = new javax.swing.JTextField();
        btntimkiem = new javax.swing.JButton();
        btnlammoi = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cbbtrangthai = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cbbthanhtoan = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblhoadonchitiet = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Danh Sách Hóa Đơn"));

        tblbanghoadon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "id", "Mã Hóa Đơn", "Tên nhân viên", "Tên Khách hàng", "Tổng tiền", "Voucher", "Thanh Toán", "Ngày Tạo", "Trạng Thái"
            }
        ));
        tblbanghoadon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblbanghoadonMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblbanghoadon);

        btninhoadon.setBackground(new java.awt.Color(0, 102, 102));
        btninhoadon.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btninhoadon.setForeground(new java.awt.Color(255, 255, 255));
        btninhoadon.setText("IN HÓA ĐƠN");
        btninhoadon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btninhoadonActionPerformed(evt);
            }
        });

        jLabel1.setText("Mã Hóa Đơn:");

        txtmahoadon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtmahoadonActionPerformed(evt);
            }
        });

        btntimkiem.setBackground(new java.awt.Color(0, 102, 102));
        btntimkiem.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btntimkiem.setForeground(new java.awt.Color(255, 255, 255));
        btntimkiem.setText("Tìm Kiếm");
        btntimkiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btntimkiemActionPerformed(evt);
            }
        });

        btnlammoi.setBackground(new java.awt.Color(0, 102, 102));
        btnlammoi.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnlammoi.setForeground(new java.awt.Color(255, 255, 255));
        btnlammoi.setText("Làm Mới");
        btnlammoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnlammoiActionPerformed(evt);
            }
        });

        jLabel2.setText("Trạng Thái: ");

        cbbtrangthai.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Đã thanh toán", "Hủy thanh toán" }));
        cbbtrangthai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbtrangthaiActionPerformed(evt);
            }
        });

        jLabel3.setText("Thanh Toán:");

        cbbthanhtoan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 - 500", "500 - 1000", "1000 - 3000", "3000 - 5000", "5000 - 7000", "7000 - 10000", "còn lại" }));
        cbbthanhtoan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbthanhtoanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(488, 488, 488)
                        .addComponent(btninhoadon, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtmahoadon, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btntimkiem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnlammoi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 277, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbbtrangthai, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbbthanhtoan, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtmahoadon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btntimkiem)
                    .addComponent(btnlammoi)
                    .addComponent(jLabel2)
                    .addComponent(cbbtrangthai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cbbthanhtoan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(btninhoadon, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Danh Sách Sản Phẩm"));

        tblhoadonchitiet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "STT", "Mã Hóa Đơn", "Mã SPCT", "Tên Sản Phẩm", "Màu Sắc", "Kích Thước", "Đế Giày", "Số Lượng", "Giá Bán", "Thành Tiền"
            }
        ));
        jScrollPane2.setViewportView(tblhoadonchitiet);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btninhoadonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btninhoadonActionPerformed
        int selectedRow = tblbanghoadon.getSelectedRow(); // Lấy dòng hóa đơn được chọn
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hóa đơn để in!");
            return;
        }
        DanhSachHoaDon selectedHoaDon = danhSachHoaDonList.get(selectedRow);
        hoaDonChiTietList = hoaDonChiTietService.getAllDanhSachHoaDon(selectedHoaDon.getId());
        if (hoaDonChiTietList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Hóa đơn này không có chi tiết!");
            return;
        }
        String fileName = "HoaDon_" + selectedHoaDon.getMaHoaDon() + ".pdf";
        exportInvoiceToPDF(selectedHoaDon, hoaDonChiTietList, fileName);
    }//GEN-LAST:event_btninhoadonActionPerformed

    private void exportInvoiceToPDF(DanhSachHoaDon hoaDon, List<HoaDonChiTiet> chiTietList, String fileName) {
        try {
            String userHome = System.getProperty("user.home");
            String downloadsPath = userHome + "/Downloads/" + fileName;
            PdfWriter writer = new PdfWriter(new FileOutputStream(downloadsPath));
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);
            String fontPath = "src/ultis/Times New Roman.ttf"; // Đảm bảo đường dẫn đúng
            PdfFont font = PdfFontFactory.createFont(fontPath, PdfEncodings.IDENTITY_H);
            Paragraph dateParagraph = new Paragraph(new SimpleDateFormat("dd/MM/yyyy").format(hoaDon.getNgayTao()))
                    .setTextAlignment(TextAlignment.RIGHT)
                    .setFont(font)
                    .setFontSize(10)
                    .setMarginBottom(10);
            document.add(dateParagraph);
            Paragraph title = new Paragraph("HÓA ĐƠN BÁN HÀNG")
                    .setTextAlignment(TextAlignment.CENTER)
                    .setFont(font)
                    .setBold()
                    .setFontSize(20)
                    .setMarginBottom(20);
            document.add(title);
            document.add(new Paragraph("Mã Hóa Đơn: " + hoaDon.getMaHoaDon())
                    .setFont(font).setFontSize(12).setMarginBottom(5));
            document.add(new Paragraph("Tên Nhân Viên: " + hoaDon.getTenNhanVien())
                    .setFont(font).setFontSize(12).setMarginBottom(5));
            document.add(new Paragraph("Tên Khách Hàng: " + hoaDon.getTenKhachHang())
                    .setFont(font).setFontSize(12).setMarginBottom(5));
            document.add(new Paragraph("Voucher: " + (hoaDon.getVoucher() != null ? hoaDon.getVoucher() : "Không"))
                    .setFont(font).setFontSize(12).setMarginBottom(5));
            document.add(new Paragraph("Trạng Thái: " + switch (hoaDon.getTrangThai()) {
                case 1 ->
                    "Đã thanh toán";
                case 0 ->
                    "Chờ thanh toán";
                case 3 ->
                    "Hủy thanh toán";
                default ->
                    "Không xác định";
            }).setFont(font).setFontSize(12).setMarginBottom(20));

            Table productTable = new Table(UnitValue.createPercentArray(new float[]{1, 4, 2, 2, 1, 2, 3}))
                    .useAllAvailableWidth()
                    .setMarginBottom(20);
            productTable.addHeaderCell(createHeaderCell("STT", font, ColorConstants.LIGHT_GRAY));
            productTable.addHeaderCell(createHeaderCell("Tên Sản Phẩm", font, ColorConstants.LIGHT_GRAY));
            productTable.addHeaderCell(createHeaderCell("Màu Sắc", font, ColorConstants.LIGHT_GRAY));
            productTable.addHeaderCell(createHeaderCell("Kích Thước", font, ColorConstants.LIGHT_GRAY));
            productTable.addHeaderCell(createHeaderCell("SL", font, ColorConstants.LIGHT_GRAY));
            productTable.addHeaderCell(createHeaderCell("Giá Bán", font, ColorConstants.LIGHT_GRAY));
            productTable.addHeaderCell(createHeaderCell("Thành Tiền", font, ColorConstants.LIGHT_GRAY));
            int stt = 1;
            NumberFormat nf = NumberFormat.getInstance(new Locale("vi", "VN")); // Định dạng số theo chuẩn Việt Nam
            for (HoaDonChiTiet chiTiet : chiTietList) {
                productTable.addCell(createCell(String.valueOf(stt++), font, TextAlignment.CENTER));
                productTable.addCell(createCell(chiTiet.getTenSanPham(), font, TextAlignment.CENTER));
                productTable.addCell(createCell(chiTiet.getTenMauSac(), font, TextAlignment.CENTER));
                productTable.addCell(createCell(chiTiet.getTenKichThuoc(), font, TextAlignment.CENTER));
                productTable.addCell(createCell(nf.format(chiTiet.getSoLuong()), font, TextAlignment.CENTER));
                productTable.addCell(createCell(nf.format(chiTiet.getGiaBan()), font, TextAlignment.CENTER));
                productTable.addCell(createCell(nf.format(chiTiet.getThanhTien()), font, TextAlignment.CENTER));
            }
            document.add(productTable);
            Paragraph totalParagraph = new Paragraph("Tổng Thanh Toán: " + nf.format(hoaDon.getTongTien()))
                    .setTextAlignment(TextAlignment.RIGHT)
                    .setFont(font)
                    .setBold()
                    .setFontSize(12)
                    .setMarginTop(10);
            document.add(totalParagraph);
            document.close();
            JOptionPane.showMessageDialog(this, "Tạo hóa đơn thành công và được lưu tại: " + downloadsPath);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi tạo PDF: " + e.getMessage());
        }
    }

    private Cell createHeaderCell(String content, PdfFont font, Color bgColor) {
        return new Cell().add(new Paragraph(content).setFont(font))
                .setBold()
                .setTextAlignment(TextAlignment.CENTER)
                .setBackgroundColor(bgColor);
    }

    private Cell createCell(String content, PdfFont font, TextAlignment alignment) {
        return new Cell().add(new Paragraph(content).setFont(font).setTextAlignment(alignment));
    }
    private void tblbanghoadonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblbanghoadonMouseClicked
        // TODO add your handling code here: int row = tblhoadon.getSelectedRow(); // Get the selected row index
        int row = tblbanghoadon.getSelectedRow();
        if (row != -1) {
            try {
                int idHoaDon = Integer.parseInt(tblbanghoadon.getValueAt(row, 0).toString());
                String maHoaDon = tblbanghoadon.getValueAt(row, 1).toString();
                ChonHoaDon = idHoaDon;
                fillTableHDCT(ChonHoaDon);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi xử lý hóa đơn: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hóa đơn!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_tblbanghoadonMouseClicked
    private void fillTableHoaDonTimkiem(List<DanhSachHoaDon> danhSachHoaDon) {
        dtmHoaDon = (DefaultTableModel) tblbanghoadon.getModel();
        dtmHoaDon.setRowCount(0);
        for (DanhSachHoaDon hoaDon : danhSachHoaDon) {
            dtmHoaDon.addRow(hoaDon.toDataRow());
        }
    }
    private void btntimkiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btntimkiemActionPerformed
        // TODO add your handling code here:
        String maHoaDon = txtmahoadon.getText().trim();  // Lấy mã hóa đơn từ ô nhập liệu
        if (maHoaDon.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã hóa đơn để tìm kiếm!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                List<DanhSachHoaDon> danhSachHoaDon = danhSachHoaDonService.timKiemHoaDonTheoMa(maHoaDon);
                if (danhSachHoaDon.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Không tìm thấy hóa đơn nào với mã: " + maHoaDon, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    fillTableHoaDonTimkiem(danhSachHoaDon);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm hóa đơn: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btntimkiemActionPerformed

    private void txtmahoadonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtmahoadonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtmahoadonActionPerformed

    private void btnlammoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnlammoiActionPerformed
        // TODO add your handling code here:
        fillTableHoaDon();
    }//GEN-LAST:event_btnlammoiActionPerformed

    private void cbbtrangthaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbtrangthaiActionPerformed
        // TODO add your handling code here:
        String trangThai = cbbtrangthai.getSelectedItem().toString();
        if ("Tất cả".equals(trangThai)) {
            fillTableHoaDon();
        } else {
            try {
                List<DanhSachHoaDon> danhSachHoaDon = danhSachHoaDonService.LocHoaDonTheoTrangThai(trangThai);
                fillTableHoaDonTimkiem(danhSachHoaDon);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm hóa đơn theo trạng thái: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_cbbtrangthaiActionPerformed

    private void cbbthanhtoanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbthanhtoanActionPerformed
        // TODO add your handling code here:
        String trangThai = "1";
        String khoangTien = cbbthanhtoan.getSelectedItem().toString();
        double minTien = 0;
        double maxTien = 0;
        switch (khoangTien) {
            case "0 - 500":
                minTien = 0;
                maxTien = 500;
                break;
            case "500 - 1000":
                minTien = 500;
                maxTien = 1000;
                break;
            case "1000 - 3000":
                minTien = 1000;
                maxTien = 3000;
                break;
            case "3000 - 5000":
                minTien = 3000;
                maxTien = 5000;
                break;
            case "5000 - 7000":
                minTien = 5000;
                maxTien = 7000;
                break;
            case "7000 - 10000":
                minTien = 7000;
                maxTien = 10000;
                break;
            case "còn lại":
                minTien = 10000;
                maxTien = Double.MAX_VALUE;
                break;
            default:
                break;
        }
        try {
            List<DanhSachHoaDon> danhSachHoaDon = danhSachHoaDonService.timKiemHoaDonTheoKhoangTien(trangThai, minTien, maxTien);
            if (danhSachHoaDon.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Không tìm thấy hóa đơn thỏa mãn điều kiện lọc!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            } else {

                fillTableHoaDonTimkiem(danhSachHoaDon);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi lọc hóa đơn: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cbbthanhtoanActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btninhoadon;
    private javax.swing.JButton btnlammoi;
    private javax.swing.JButton btntimkiem;
    private javax.swing.JComboBox<String> cbbthanhtoan;
    private javax.swing.JComboBox<String> cbbtrangthai;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblbanghoadon;
    private javax.swing.JTable tblhoadonchitiet;
    private javax.swing.JTextField txtmahoadon;
    // End of variables declaration//GEN-END:variables
}
